---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by croessner.
--- DateTime: 02.07.24 13:26
---

local crypto = require("crypto")
local json = require("json")

local N = "callback"

---@param logging table
------@return void
function nauthilus_run_callback(logging)
    ---@type table result
    local result = {}

    result.level = "info"
    result.caller = N .. ".lua"

    ---@return string
    local function get_current_ts()
        ---@type string currentTime
        ---@type string err
        local currentTime, err = time.format(time.unix(), "2006-01-02T15:04:05 -07:00", "Europe/Berlin")
        if err then
            error(err)
        end

        return currentTime
    end

    ---@param err_string string
    ---@return void
    local function print_result(err_string)
        result.ts = get_current_ts()

        if err_string ~= nil and err_string ~= "" then
            result.level = "error"

            result.error = err_string
        end

        if logging.log_format == "json" then
            ---@type string result_json
            ---@type string err_jenc
            local result_json, err_jenc = json.encode(result)
            if err_jenc ~= nil then
                error(err_jenc)
            end

            print(result_json)
        else
            ---@type table output_str
            local output_str = {}

            for k, v in pairs(result) do
                if string.match(v, "%s") then
                    v = '"' .. v .. '"'
                end

                table.insert(output_str, k .. '=' .. v)
            end

            print(table.concat(output_str, " "))
        end
    end

    ---@type table header
    local header = nauthilus.get_http_request_header("Content-Type")

    ---@type table request
    local body = nauthilus.get_http_request_body()

    if #header == 0 or header[1] ~= "application/json" then
        print_result("HTTP request header: Wrong 'Content-Type'")

        return
    end

    ---@type table body_table
    ---@type string err_jdec
    local body_table, err_jdec = json.decode(body)
    if err_jdec ~= nil then
        print_result(err_jdec)

        return
    end

    if type(body_table) ~= "table" then
        print_result("HTTP request body: Result is not a table")

        return
    end

    result.state = "client disconnected"
    result.dovecot_session = "unknown"

    ---@type boolean is_cmd_noop
    local is_cmd_noop = false

    ---@param k table
    ---@param v any
    for k, v in pairs(body_table) do
        if k == "categories" then
            if type(v) == "table" then
                ---@param category table
                for _, category in ipairs(v) do
                    if category == "service:imap" or category == "service:lmtp" then
                        result.category = category
                    end
                end
            end
        elseif k == "start_time" then
            if type(v) == "string" then
                result.start_time = v
            end
        elseif k == "end_time" then
            if type(v) == "string" then
                result.end_time = v
            end
        elseif k == "fields" then
            if type(v) == "table" then
                ---@param field_name string
                ---@param field_value string
                for field_name, field_value in pairs(v) do
                    if field_name == "user" then
                        result.user = field_value
                    elseif field_name == "session" then
                        result.dovecot_session = field_value
                    elseif field_name == "remote_ip" then
                        result.remote_ip = field_value
                    elseif field_name == "remote_port" then
                        result.remote_port = field_value
                    elseif field_name == "cmd_name" then
                        if field_value == "NOOP" then
                            is_cmd_noop = true
                        end
                    end
                end
            end
        end
    end

    if result.category == "service:imap" or result.category == "service:pop3" or result.category == "service:lmtp" or result.category == "service:sieve" then
        if result.dovecot_session ~= "unknown" then
            ---@type string redis_key
            local redis_key = "ntc:DS:" .. crypto.md5(result.user)

            if is_cmd_noop then
                nauthilus.redis_expire(redis_key, 3600)
            else
                -- Cleanup dovecot session
                ---@type string deleted
                ---@type string err_redis_hdel
                local deleted, err_redis_hdel = nauthilus.redis_hdel(redis_key, result.dovecot_session)
                if err_redis_hdel ~= nil then
                    result.remove_dovecot_session_status = err_redis_hdel
                else
                    result.remove_dovecot_session_status = deleted
                end
            end
        end

        if logging.log_level == "debug" or logging.log_level == "info" then
            print_result()
        end
    end
end
