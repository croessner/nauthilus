-- Copyright (C) 2025 Christian RÃ¶ÃŸner
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program. If not, see <https://www.gnu.org/licenses/>.

local nauthilus_util = require("nauthilus_util")

dynamic_loader("nauthilus_http_request")
local nauthilus_http_request = require("nauthilus_http_request")

dynamic_loader("nauthilus_http_response")
local nauthilus_http_response = require("nauthilus_http_response")

local N = "hello-world-request-dump"

-- sanitize_value will redact any occurrence of the word "password" and common value patterns next to it
local function sanitize_value(key, value)
    if not value then
        return value
    end

    local function mask(v)
        if not v or v == "" then
            return v
        end
        -- Mask URL-encoded and plain occurrences like password=xxx or password: xxx (case-insensitive)
        v = string.gsub(v, '([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd])%s*[:=]%s*([^&\n\r]*)', function(k, _)
            return k .. '=********'
        end)
        -- Mask JSON-like occurrences: "password": "xyz"
        v = string.gsub(v, '"[Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]"%s*:%s*".-"', '"password":"********"')
        -- Also mask if value contains a standalone password-looking token
        return v
    end

    -- If the key itself suggests it's a password, mask the whole value
    if key and string.find(string.lower(tostring(key)), "password", 1, true) then
        return "********"
    end

    return mask(tostring(value))
end

local function html_escape(s)
    if not s then return "" end
    s = tostring(s)
    s = s:gsub("&", "&amp;")
    s = s:gsub("<", "&lt;")
    s = s:gsub(">", "&gt;")
    s = s:gsub('"', "&quot;")
    return s
end

function nauthilus_run_hook(logging, session)
    local result = {
        level = "info",
        caller = N .. ".lua",
        session = session,
        status = "success",
        message = "Rendered Hello World HTML with request dump",
    }

    -- Gather request info
    local method = nauthilus_http_request.get_http_method()
    local path = nauthilus_http_request.get_http_path()

    -- Headers table: { header -> [values] }
    local headers = nauthilus_http_request.get_all_http_request_headers()

    -- Body as string (safe to read; implementation restores it afterwards)
    local body = nauthilus_http_request.get_http_request_body()
    body = sanitize_value("body", body)

    -- Build HTML
    local parts = {}
    table.insert(parts, "<!DOCTYPE html>")
    table.insert(parts, "<html lang=\"en\">")
    table.insert(parts, "<head>")
    table.insert(parts, "  <meta charset=\"utf-8\" />")
    table.insert(parts, "  <title>Nauthilus Hello World</title>")
    table.insert(parts, "  <style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,\"Helvetica Neue\",Arial,\"Noto Sans\",\"Apple Color Emoji\",\"Segoe UI Emoji\";padding:1.25rem} h1{margin-top:0} code,pre{background:#f6f8fa;border:1px solid #eaecef;border-radius:6px;padding:.5rem;display:block;white-space:pre-wrap;word-break:break-word} table{border-collapse:collapse;margin-top:.5rem} th,td{border:1px solid #ddd;padding:.4rem .6rem;text-align:left} th{background:#fafafa}</style>")
    table.insert(parts, "</head>")
    table.insert(parts, "<body>")
    table.insert(parts, "  <h1>Hello World ðŸ‘‹</h1>")
    table.insert(parts, "  <p>This page is generated by a Nauthilus Lua hook. It uses the new HTTP response methods.</p>")

    table.insert(parts, "  <h2>Request</h2>")
    table.insert(parts, "  <table>")
    table.insert(parts, "    <tr><th>Method</th><td>" .. html_escape(method) .. "</td></tr>")
    table.insert(parts, "    <tr><th>Path</th><td>" .. html_escape(path) .. "</td></tr>")
    table.insert(parts, "  </table>")

    table.insert(parts, "  <h3>Headers</h3>")
    table.insert(parts, "  <table>")
    table.insert(parts, "    <tr><th>Name</th><th>Value(s)</th></tr>")

    -- Iterate over headers (headers is a table of lists); redact any password-like values
    for name, values in pairs(headers) do
        local display_values = {}
        if type(values) == "table" then
            for _, v in pairs(values) do
                table.insert(display_values, html_escape(sanitize_value(name, v)))
            end
        else
            table.insert(display_values, html_escape(sanitize_value(name, values)))
        end
        table.insert(parts, "    <tr><td>" .. html_escape(name) .. "</td><td>" .. table.concat(display_values, ", ") .. "</td></tr>")
    end
    table.insert(parts, "  </table>")

    table.insert(parts, "  <h3>Body</h3>")
    if body and body ~= "" then
        table.insert(parts, "  <pre>" .. html_escape(body) .. "</pre>")
    else
        table.insert(parts, "  <p><em>(empty)</em></p>")
    end

    table.insert(parts, "  <hr />")
    table.insert(parts, "  <p style=\"color:#555\">Example hook: " .. html_escape(N) .. "</p>")
    table.insert(parts, "</body>")
    table.insert(parts, "</html>")

    local html = table.concat(parts, "\n")

    -- Use the new HTTP response methods
    nauthilus_http_response.set_http_response_header("Content-Type", "text/html; charset=utf-8")
    nauthilus_http_response.set_http_status(200)
    nauthilus_http_response.write_http_response_body(html)

    if logging.log_level == "debug" or logging.log_level == "info" then
        nauthilus_util.print_result(logging, result)
    end

    -- Returning nil tells the framework that we already handled the HTTP response
    return nil
end
